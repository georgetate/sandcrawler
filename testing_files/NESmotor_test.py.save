import pygame
import time
import sys
import math
import qwiic_scmd

# Initialize motor driver
myMotor = qwiic_scmd.QwiicScmd()
R_MTR = 0
L_MTR = 1
FWD = 0
BWD = 1

# Motor initialization
def initialize_motor():
    if myMotor.connected == False:
        print("Motor Driver not connected. Check connections.", file=sys.stderr)
        sys.exit(1)
    myMotor.begin()
    print("Motor initialized.")
    time.sleep(0.25)
    # Zero Motor Speeds
    myMotor.set_drive(R_MTR, FWD, 0)
    myMotor.set_drive(L_MTR, FWD, 0)
    myMotor.enable()
    print("Motor enabled.")
    time.sleep(0.25)

# Spin motors
def spin_motors(speed):
    myMotor.set_drive(R_MTR, FWD, speed)
    myMotor.set_drive(L_MTR, BWD, speed)

# Stop motors
def stop_motors():
    myMotor.set_drive(R_MTR, FWD, 0)
    myMotor.set_drive(L_MTR, BWD, 0)

# Initialize Pygame
pygame.init()

# Screen setup
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 500
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Joysticks")

# Font setup
font_size = 30
font = pygame.font.SysFont("Futura", font_size)

# Function to display text
def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))

# Frame rate
clock = pygame.time.Clock()
FPS = 60

# Joystick setup
pygame.joystick.init()
joysticks = []

# Player rectangle setup
x = 350
y = 200
player = pygame.Rect(x, y, 100, 100)
col = "royalblue"

# Initialize motor driver
initialize_motor()

# Game loop
run = True
motor_speed = 20  # Start motor speed
while run:
    clock.tick(FPS)

    # Update background
    screen.fill(pygame.Color("midnightblue"))

    # Draw player
    player.topleft = (x, y)
    pygame.draw.rect(screen, pygame.Color(col), player)

    # Display number of controllers and details
    draw_text("Controllers: " + str(pygame.joystick.get_count()), font, pygame.Color("azure"), 10, 10)
    for joystick in joysticks:
        draw_text("Controller Type: " + str(joystick.get_name()), font, pygame.Color("azure"), 10, 35)
        draw_text("Number of axes: " + str(joystick.get_numaxes()), font, pygame.Color("azure"), 10, 60)

    # Joystick input handling
    for joystick in joysticks:
        # Change player color with buttons
        if joystick.get_button(0):
            col = "royalblue"
        if joystick.get_button(1):
            col = "crimson"
        if joystick.get_button(2):
            col = "fuchsia"
        if joystick.get_button(3):
            col = "forestgreen"

        # Adjust motor speed with buttons
        if joystick.get_button(1):  # Spin motors up
            if motor_speed < 255:
                motor_speed += 5
                print(f"Motor speed: {motor_speed}")
                spin_motors(motor_speed)
                time.sleep(0.1)
        if joystick.get_button(2):  # Spin motors down
            if motor_speed > 20:
                motor_speed -= 5
                print(f"Motor speed: {motor_speed}")
                spin_motors(motor_speed)
                time.sleep(0.1)

        # Player movement with analog sticks
        horiz_move = joystick.get_axis(0)
        vert_move = joystick.get_axis(1)
        if abs(vert_move) > 0.05:
            y += vert_move * 5
            if motor_speed < 255:
               motor_speed += 5
               spin_motors(motor_speed)
               time.sleep(0.1)
        if abs(horiz_move) > 0.05:
            x += horiz_move * 5

    # Event handler
    for event in pygame.event.get():
        if event.type == pygame.JOYDEVICEADDED:
            joy = pygame.joystick.Joystick(event.device_index)
            joy.init()
            joysticks.append(joy)
        if event.type == pygame.JOYDEVICEREMOVED:
            joy_id = event.device_index
            joysticks = [joy for joy in joysticks if joy.get_id() != joy_id]
        if event.type == pygame.QUIT:
            run = False

    # Update display
    pygame.display.flip()

# Stop motors on exit
stop_motors()
myMotor.disable()
pygame.quit()

